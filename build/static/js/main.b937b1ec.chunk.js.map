{"version":3,"sources":["components/OrderForms/FormOrder/FormOrder.module.css","components/OrderForms/FormOrderDetails/FormOrderDetails.module.css","components/Uncomma/Uncomma.module.css","components/Footer/Footer.module.css","components/Uncomma/Uncomma.js","components/Footer/Footer.js","hoc/Layout/Layout.js","components/OrderForms/FormOrder/FormOrder.js","components/OrderForms/FormOrderDetails/FormOrderDetails.js","components/OrderForms/FormMain/FormMain.js","hoc/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Uncomma","className","href","classes","Footer","Layout","props","Fragment","children","FormOrder","nextStep","handleChange","step","type","name","value","onChange","onClick","FormOrderDetails","prevStep","sendMessage","size","placeholder","FormMain","useState","typeOfOrder","email","description","state","setState","input","event","target","body","JSON","stringify","chat_id","parse_mode","text","xhr","XMLHttpRequest","open","setRequestHeader","send","status","alert","console","log","render","App","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b937b1ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"yellow-btn\":\"FormOrder_yellow-btn__39Ul5\",\"grey-text\":\"FormOrder_grey-text__fTKXK\",\"flex-grid\":\"FormOrder_flex-grid__1Hs9r\",\"grid-item\":\"FormOrder_grid-item__kvojq\",\"check\":\"FormOrder_check__7gYp9\",\"checkmark\":\"FormOrder_checkmark__E_qyv\",\"form-status\":\"FormOrder_form-status__wAgP8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"yellow-btn\":\"FormOrderDetails_yellow-btn__2G8xZ\",\"grey-text\":\"FormOrderDetails_grey-text__dkCNi\",\"flex-grid\":\"FormOrderDetails_flex-grid__3MhF9\",\"grid-item\":\"FormOrderDetails_grid-item__3qZ--\",\"back-btn\":\"FormOrderDetails_back-btn__dIm_i\",\"form-status\":\"FormOrderDetails_form-status__1nZ1y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Uncomma_logo__3sO25\",\"logo-text-part1\":\"Uncomma_logo-text-part1__3rn3V\",\"logoTextPart2\":\"Uncomma_logoTextPart2__37gHb\",\"portfolio-links\":\"Uncomma_portfolio-links__1oD7M\",\"comma\":\"Uncomma_comma__1CHwq\",\"about\":\"Uncomma_about__YuZzL\",\"header-text\":\"Uncomma_header-text__1mz7n\",\"bold-text\":\"Uncomma_bold-text__1pS9A\",\"dot\":\"Uncomma_dot__3iDVo\",\"box\":\"Uncomma_box__3osgK\",\"center-btn\":\"Uncomma_center-btn__3T0VP\",\"yellow-btn\":\"Uncomma_yellow-btn__WEU8v\",\"grey-text\":\"Uncomma_grey-text__Xy_E0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3F1K6\"};","import React from 'react'\r\nimport classes from './Uncomma.module.css'\r\n\r\nconst Uncomma = () =>\r\n    <div className=\"app-header\">\r\n        <header>\r\n            <a href=\"/\" className={classes['logo']}>\r\n                <span className={classes['logo-text-part1']}>un</span>\r\n\r\n                <span className={classes['logo-text-part2']}>comma\r\n                        <div className={classes['comma']}/>\r\n                </span>\r\n            </a>\r\n            <section className={classes['header-text']}>\r\n                <span className={classes['bold-text']}>We bring your ideas to life<span\r\n                    className={classes['dot']}>.</span>\r\n                </span>\r\n\r\n                <span>\r\n                    <br/>We <span className={classes['box']}>design</span> & <span\r\n                    className={classes['box']}>develop</span> interactive experiences\r\n                </span>\r\n            </section>\r\n        </header>\r\n        <h1>Tell what do you want us to do</h1>\r\n    </div>\r\n\r\nexport default Uncomma","import React from 'react';\r\nimport classes from './Footer.module.css'\r\n\r\nconst Footer = () =>\r\n    <div className={classes['footer']}>\r\n        <a href=\"https://github.com/dragonfighter302\">dragonfighter302</a>\r\n        &nbsp;&&nbsp;\r\n        <a href=\"https://github.com/stilManiac\">stilManiac</a>\r\n    </div>\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Uncomma from \"../../components/Uncomma/Uncomma\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\n\r\nconst Layout = (props) => {\r\n    return (\r\n        <div>\r\n            <Uncomma/>\r\n            <React.Fragment>\r\n                {props.children}\r\n            </React.Fragment>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport classes from './FormOrder.module.css'\r\n\r\nconst FormOrder = ({nextStep, handleChange, step}) =>\r\n    <div>\r\n        <div className={`${classes['grey-text']} ${classes['form-status']}`}>{step}/2</div>\r\n        <div className={classes['grey-text']}>We need this information to sort your order and respond you as\r\n            soon as possible\r\n        </div>\r\n        <div className={classes['flex-grid']}>\r\n            <div className={classes['grid-item']}>\r\n                <label className={classes['check']}>Web, Mobile & Software dev\r\n                    <input type=\"radio\" name=\"order_type\" value=\"Web, Mobile & Software dev\"\r\n                           onChange={handleChange('typeOfOrder')}/>\r\n                    <span className={classes['checkmark']}/>\r\n                </label>\r\n            </div>\r\n            <div className={classes['grid-item']}>\r\n                <label className={classes['check']}>Design & Creative\r\n                    <input type=\"radio\" name=\"order_type\" value=\"Design & Creative\"\r\n                           onChange={handleChange('typeOfOrder')}/>\r\n                    <span className={classes['checkmark']}/>\r\n                </label>\r\n            </div>\r\n            <div className={classes['grid-item']}>\r\n                <label className={classes['check']}>Data Science & IT\r\n                    <input type=\"radio\" name=\"order_type\" value=\"Data Science & IT\"\r\n                           onChange={handleChange('typeOfOrder')}/>\r\n                    <span className={classes['checkmark']}/>\r\n                </label>\r\n            </div>\r\n            <div className={classes['grid-item']}>\r\n                <label className={classes['check']}>Translation\r\n                    <input type=\"radio\" name=\"order_type\" value=\"Translation\"\r\n                           onChange={handleChange('typeOfOrder')}/>\r\n                    <span className={classes['checkmark']}/>\r\n                </label>\r\n            </div>\r\n            <div className={classes['grid-item']}>\r\n\r\n            </div>\r\n            <div className={classes['grid-item']}>\r\n                <button className={classes['yellow-btn']} onClick={nextStep}>Next</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\nexport default FormOrder;","import React from 'react'\r\nimport classes from './FormOrderDetails.module.css'\r\n\r\nconst FormOrderDetails = ({prevStep, handleChange, sendMessage, step}) => {\r\n    return (\r\n        <div>\r\n            <div className={`${classes['grey-text']} ${classes['form-status']}`}>{step}/2</div>\r\n            <div className={classes['grey-text']}>Almost done. It's important to fill\r\n                in these fields before starting work\r\n            </div>\r\n            <div className={classes['flex-grid']}>\r\n                <div className={classes['grid-item']}>\r\n                    <input type=\"text\" size=\"40\"\r\n                           placeholder=\"First and Last name\"\r\n                           onChange={handleChange('name')}\r\n                    />\r\n                </div>\r\n                <div className={classes['grid-item']}>\r\n                    <input type=\"text\" size=\"40\" placeholder=\"Email\"\r\n                           onChange={handleChange('email')}/>\r\n                </div>\r\n                <div className={classes['grid-item']}>\r\n                    <textarea placeholder=\"Give brief description of your order\"\r\n                              onChange={handleChange('description')}/>\r\n                </div>\r\n                <div className={classes['grid-item']}>\r\n                    <button className={`${classes['yellow-btn']} ${classes['back-btn']}`} onClick={prevStep}>Back\r\n                    </button>\r\n                    <button className={classes['yellow-btn']} onClick={sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormOrderDetails\r\n","import React, {useState} from 'react';\r\nimport FormOrder from '../FormOrder/FormOrder'\r\nimport FormOrderDetails from '../FormOrderDetails/FormOrderDetails'\r\n\r\nconst FormMain = () => {\r\n    const [state, setState] = useState({\r\n        typeOfOrder: '',\r\n        name: '',\r\n        email: '',\r\n        description: '',\r\n        step: 1\r\n    });\r\n\r\n    const nextStep = () => {\r\n        if (state.typeOfOrder !== '') {\r\n            setState({...state, step: state.step + 1});\r\n        }\r\n    }\r\n\r\n    const prevStep = () => {\r\n        setState({\r\n            typeOfOrder: '',\r\n            name: '',\r\n            email: '',\r\n            description: '',\r\n            step: state.step - 1\r\n        });\r\n    }\r\n\r\n    const handleChange = (input) => (event) => {\r\n        setState({...state, [input]: event.target.value});\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        const {typeOfOrder, name, email, description} = state;\r\n\r\n        if (typeOfOrder && name && email && description !== '') {\r\n            // This code must be on the backend as the part of web api to safely interact with API keys and the React frontend\r\n            const TOKEN = '';\r\n            const CHAT_ID = '';\r\n\r\n            const url = 'https://api.telegram.org/bot' + TOKEN + '/sendMessage';\r\n            //\r\n            const body = JSON.stringify({\r\n                chat_id: CHAT_ID,\r\n                parse_mode: 'Markdown',\r\n                text: `Новый заказ: \\nИмя и фамилия: ${name}\\nТип заказа: ${typeOfOrder}\\nEmail: ${email}\\nОписание: ${description}`\r\n            });\r\n\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open('POST', url, true);\r\n            xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\r\n            xhr.send(body);\r\n            if (xhr.status === 200) {\r\n                alert('Your order has been accepted');\r\n            } else {\r\n                alert('An error has occurred')\r\n            }\r\n\r\n            setState({\r\n                typeOfOrder: '',\r\n                name: '',\r\n                email: '',\r\n                description: '',\r\n                step: 1\r\n            });\r\n        } else {\r\n            alert('You did not fill in all fields');\r\n        }\r\n    };\r\n\r\n    const render = (step) => {\r\n        switch (step) {\r\n            case 1:\r\n                return (\r\n                    <FormOrder\r\n                        step={step}\r\n                        nextStep={nextStep}\r\n                        handleChange={handleChange}\r\n                    />\r\n                )\r\n            case 2:\r\n                return (\r\n                    <FormOrderDetails\r\n                        step={step}\r\n                        handleChange={handleChange}\r\n                        prevStep={prevStep}\r\n                        sendMessage={sendMessage}\r\n                    />\r\n                )\r\n            default:\r\n                return (\r\n                    <div>\r\n                        <h1>Something went wrong :(</h1>\r\n                        {console.log('something went wrong')}\r\n                    </div>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {render(state.step)}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default FormMain;","import React, {Component} from 'react'\nimport Layout from \"../Layout/Layout\";\nimport FormMain from '../../components/OrderForms/FormMain/FormMain'\n\nclass App extends Component {\n    render() {\n        return (\n            <Layout>\n                <FormMain/>\n\n            </Layout>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './hoc/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}